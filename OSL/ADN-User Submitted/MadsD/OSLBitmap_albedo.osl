// Bitmaplookup Albedo by Mads Dr√∏schler 26.05.2020
// Enable render time Mip mapping for this map to work
// Albedo function is not supported in the 3ds max viewport
// Default value at 8, gives a reasonable good output, lower values return more uniform looks.

//////// Original header //////////////
// Lookup a bitmap bitmap with OSL
// OSLBitmap.osl, by Zap Andersson
// Modified: 2019-11-26
// Copyright 2019 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
//////// Original header //////////////




color luminosity( color s, color d )
{
	float dLum = dot(d, color(0.3, 0.59, 0.11));
	float sLum = dot(s, color(0.3, 0.59, 0.11));
	float lum = sLum - dLum;
	color c = d + lum;
	float minC = min(min(c[0], c[1]), c[2]);
	float maxC = max(max(c[0], c[1]), c[2]);
	if(minC < 0.0) return sLum + ((c - sLum) * sLum) / (sLum - minC);
	else if(maxC > 1.0) return sLum + ((c - sLum) * (1.0 - sLum)) / (maxC - sLum);
	else return c;
	
}


shader OSLBitmap_albedo
[[ string help  = "Look up a bitmap from passed in UV coordinates<br/>(through OpenImageIO)",
   string label = "Bitmap Lookup Albedo",
   string version = "2.0" ]]
(  
  point  Pos   = point(u,v,0) 
  	[[  string label= "UV Coordinate", 
  		string help = "The 2D coordiante at which the texture is looked up." ]],
  float  Scale  = 1.0
  	[[  string help = "A linear scale factor. For more complex UV manipluation, connect the UVWTransform." ]], 
  
  string Filename = "" 
  	[[ string widget="filename", 
  	   string label="File name",
  	   string help="The name of the texture to look up" ]], 
  int    UDIM   = 0
  	[[ string widget="checkBox", string label="UDIM-compatible lookup",
  	   int connectable = 0,
  	   string help  ="Modifies the UV coordinate so that UDIM's are looked up similar to the max MultiTile map" ]],  	   
  string WrapMode = "periodic"
  	[[ string widget="popup", string options = "default|black|clamp|periodic|mirror",
  	   string label="Wrap Mode",
  	   string help="How the texture wraps: (black, clamp, periodic or mirror)." ]],
 
  int    AutoGamma   = 1   
  	[[ string widget="checkBox", int connectable=0 ]],
  float  ManualGamma = 1.0 
  	[[ string label="Manual Gamma" ]],
  	float Blur = 8[[int connectable = 0, string widget = "null"]],
    
  output color Col = 0     [[ string label="Col (RGB)" ]],
  output color Albedo = 0,
  output float R = 0,
  output float G = 0,
  output float B = 0,
  output float A = 1,
  output float Luminance = 0,
  output float Average = 0,

  
)
{
	// Skip empty files
	if (strlen(Filename) == 0)
		return;
	
	point p = Pos  / Scale;

	// Default lookup, just use u and inverted v...
	float ulookup = p[0];
	float vlookup = 1.0 - p[1];
	
	// But for UDIM compatibility and max's idea that 0,0 is in 
	// lower left corner, we need this juggling of v....
	if (UDIM)
	{
		float vfloor  = floor(p[1]);
		float vfrac   = p[1] - vfloor;
		vlookup = vfloor + (1.0 - vfrac);
	}
	float Blurscaled = Blur/100;
	color ColMain  = texture(Filename, ulookup, vlookup,"wrap", WrapMode, "alpha", A);
	color ColBlur  = texture(Filename, ulookup, vlookup,"blur", Blurscaled, "wrap", WrapMode, "alpha", A);
			
	Col = ColMain;
	ColMain-=ColBlur-0.5;
	color lum = dot(ColMain,vector(.2125, 0.7154, .0721));
	lum = pow(lum,2.2);
	color Highpass = pow(ColMain,2.2);
	
	int channels;
	gettextureinfo(Filename, "channels", channels);
	if (channels < 4) // No alpha? Set it to opaque
	{
		A = 1.0;

		if (WrapMode == "black") // 2018-04-25: Allow Decals
		{
			if (p[0] < 0.0 || p[0] > 1.0 ||
			    p[1] < 0.0 || p[1] > 1.0)
			    A = 0.0;
		}
	}
	

	// Temporary workaround for color space issues
	if (AutoGamma)
	{
		if (!endswith(Filename, ".exr") &&
			!endswith(Filename, ".EXR") &&
			!endswith(Filename, ".hdr") &&
			!endswith(Filename, ".HDR") &&
			!endswith(Filename, ".tx")  &&
			!endswith(Filename, ".TX"))
		{
			// Gamma 2.2 for sRGB approx)
			Col = pow(Col, 2.2);
		}
	}
	else
	{
		if (ManualGamma != 1.0)
			Col = pow(Col, ManualGamma);
	}
	
	R = Col[0];
	G = Col[1];
	B = Col[2];
	Luminance = luminance(Col);
	Average   = (R + G + B) / 3.0;
	
	
	
	
	Albedo = luminosity(Highpass,Col);
	
	
}